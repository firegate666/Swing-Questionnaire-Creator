package de.sep.logic.web.html;/* * SEP-Projekt WS 2001-2002 -- Questionaire *  * Projektteilnehmer: * Marco Behnke <marco@firegate.de> * Sebastian Davids <sdavids@gmx.de> * Martin Koose <martin@koose-hh.de> *  * Projektbegleitung:  * Prof. Dr. Bernd Kahlbrandt <Bernd.Kahlbrandt@informatik.fh-hamburg.de> *  * Copyright (c)2001 Behnke, Davids & Koose. Alle Rechte vorbehalten. * =========================================================================== */import de.mb.util.StringList;import de.mb.web.html.HTMLFactory;import de.sep.model.answertype.AnswerType;import de.sep.model.answertype.CompletionLimited;import de.sep.model.answertype.CompletionOpen;import de.sep.model.answertype.IAnswerType;import de.sep.model.answertype.OpenQualified;import de.sep.model.answertype.OpenQuantified;import de.sep.model.answertype.OptionBinary;import de.sep.model.answertype.OptionLimited;import de.sep.model.answertype.OptionVariable;import de.sep.model.answertype.Order;import de.sep.model.answertype.ScaleCalculated;/** *  Description of the Class * * @author     mb * @created    December 10, 2001 */public class AnswerTypeHTMLFactory {    protected final static String QUESTION = "Question_";    protected final static String ANSWER = "_Answertype_";    protected static int fQuestionNumber;    protected static int fAnswertypeNumber;    protected static void setQuestionNumber(int questionNumber) {        fQuestionNumber = questionNumber;    }    protected static void setAnswertypeNumber(int answertypeNumber) {        fAnswertypeNumber = answertypeNumber;    }    protected static int getQuestionNumber() {        return fQuestionNumber;    }    protected static int getAnswertypeNumber() {        return fAnswertypeNumber;    }    /**     *  Description of the Method     *     * @param  type                       Description of the Parameter     * @return                            Description of the Return Value     * @throws  IllegalArgumentException  Description of the Exception     */    public static String create(        IAnswerType type,        int questionNumber,        int answertypeNumber)        throws IllegalArgumentException {        setQuestionNumber(questionNumber);        setAnswertypeNumber(answertypeNumber);        int value = type.getType().getValue();        if (AnswerType.COMPLETION_LIMITED.getValue() == value)            return createCompletionLimited(type);        else if (AnswerType.COMPLETION_OPEN.getValue() == value)            return createCompletionOpen(type);        else if (AnswerType.MATCH_MULTIPLE.getValue() == value)            return createMatchMultiple(type);        else if (AnswerType.MATCH_SINGLE.getValue() == value)            return createMatchSingle(type);        else if (AnswerType.OPEN_QUALIFIED.getValue() == value)            return createOpenQualified(type);        else if (AnswerType.OPEN_QUANTIFIED.getValue() == value)            return createOpenQuantified(type);        else if (AnswerType.OPTION_BINARY.getValue() == value)            return createOptionBinary(type);        else if (AnswerType.OPTION_LIMITED.getValue() == value)            return createOptionLimited(type);        else if (AnswerType.OPTION_VARIABLE.getValue() == value)            return createOptionVariable(type);        else if (AnswerType.ORDER.getValue() == value)            return createOrder(type);        else if (AnswerType.SCALE_CALCULATED.getValue() == value)            return createScaleCalculated(type);        else if (AnswerType.SCALE_LABLED.getValue() == value)            return createScaleLabled(type);        else            throw new IllegalArgumentException("unknown type: " + type);    }    /**     *  Description of the Method     *     * @param  type  Description of the Parameter     * @return       Description of the Return Value     */    private static String createCompletionLimited(IAnswerType type) {        String result = "";        CompletionLimited cl = (CompletionLimited) type;        StringList givenOptions = cl.getGivenOptions();        StringList options = cl.getOptions();        int givenOptionCount = givenOptions.size();        int optionCount = options.size();        if (optionCount == 0)            return "";        String cellsize = 100 / optionCount + "%";        for (int i = 0; i < givenOptionCount; i++) {            result += givenOptions.get(i);            result = HTMLFactory.createTableCell(result, cellsize);        }        result += HTMLFactory.createTableCell("", cellsize);        result = HTMLFactory.createTableRow(result);        result = HTMLFactory.createTable(result, 0, 0);        // create radio buttons        String radioList = "";        for (int i = 0; i < optionCount; i++) {            radioList                += HTMLFactory.createRadioButton(                    options.get(i),                    QUESTION + getQuestionNumber() + ANSWER + getAnswertypeNumber(),                    options.get(i),                    false);            radioList += HTMLFactory.createLineBreak();        }        radioList = HTMLFactory.createParagraph(radioList);        result += radioList;        return result;    }    /**     *  Description of the Method     *     * @param  type  Description of the Parameter     * @return       Description of the Return Value     */    private static String createCompletionOpen(IAnswerType type) {        String result = "";        CompletionOpen co = (CompletionOpen) type;        StringList givenOptions = co.getGivenOptions();        int optionCount = givenOptions.size();        if (optionCount == 0)            return "";        for (int i = 0; i < optionCount; i++) {            result += givenOptions.get(i);            result += ", ";        }        result            += HTMLFactory.createTextField(                "",                QUESTION + getQuestionNumber() + ANSWER + getAnswertypeNumber(),                5,                99,                false);        return result;    }    /**     *  Description of the Method     *     * @param  type  Description of the Parameter     * @return       Description of the Return Value     */    private static String createMatchMultiple(IAnswerType type) {        StringBuffer result = new StringBuffer();        result.append("Hier muss noch was getan werden!");        return result.toString();    }    /**     *  Description of the Method     *     * @param  type  Description of the Parameter     * @return       Description of the Return Value     */    private static String createMatchSingle(IAnswerType type) {        StringBuffer result = new StringBuffer();        result.append("Hier muss noch was getan werden!");        return result.toString();    }    /**     *  Description of the Method     *     * @param  type  Description of the Parameter     * @return       Description of the Return Value     */    private static String createOpenQuantified(IAnswerType type) {        String result = "";        String leftText = "";        String rightText = "";        OpenQuantified oq = (OpenQuantified) type;        int size = oq.getColumns();        int maxValue = oq.getMaxValue();        //int minValue = oq.getMinValue();//SD-02-01-11-13-45: not used        if (oq.getLeftText() != null)            leftText = oq.getLeftText();        if (oq.getRightText() != null)            rightText = oq.getRightText();        result            += HTMLFactory.createTextField(                "",                QUESTION + getQuestionNumber() + ANSWER + getAnswertypeNumber(),                size,                new String("" + maxValue).length(),                false);        result = leftText + " " + result + " " + rightText;        return result;    }    /**     *  Description of the Method     *     * @param  type  Description of the Parameter     * @return       Description of the Return Value     */    private static String createOpenQualified(IAnswerType type) {        String result = "";        OpenQualified oq = (OpenQualified) type;        int cols = oq.getColumns();        int rows = oq.getRows();        result            += HTMLFactory.createTextArea(                "",                QUESTION + getQuestionNumber() + ANSWER + getAnswertypeNumber(),                cols,                rows,                false);        return result;    }    /**     *  Description of the Method     *     * @param  type  Description of the Parameter     * @return       Description of the Return Value     */    private static String createOptionBinary(IAnswerType type) {        String result = "";        OptionBinary ob = (OptionBinary) type;        result            += HTMLFactory.createRadioButton(                ob.getUpperLabel(),                QUESTION + getQuestionNumber() + ANSWER + getAnswertypeNumber(),                ob.getUpperLabel(),                false)            + HTMLFactory.createLineBreak();        result            += HTMLFactory.createRadioButton(                ob.getLowerLabel(),                QUESTION + getQuestionNumber() + ANSWER + getAnswertypeNumber(),                ob.getLowerLabel(),                false)            + HTMLFactory.createLineBreak();        return result;    }    /**     *  Description of the Method     *     * @param  type  Description of the Parameter     * @return       Description of the Return Value     */    private static String createOptionLimited(IAnswerType type) {        StringBuffer result = new StringBuffer();        OptionLimited ol = (OptionLimited) type;        StringList options = ol.getOptions();        //int selectableCount = ol.getSelectableCount();//SD-01-12-17: not used        int optionCount = options.size();        for (int i = 0; i < optionCount; i++) {            result.append(                HTMLFactory.createCheckBox(                    options.get(i),                    QUESTION + getQuestionNumber() + ANSWER + getAnswertypeNumber() + "_" + i,                    options.get(i),                    false));            result.append(HTMLFactory.createLineBreak());        }        return result.toString();    }    /**     *  Description of the Method     *     * @param  type  Description of the Parameter     * @return       Description of the Return Value     */    private static String createOptionVariable(IAnswerType type) {        StringBuffer result = new StringBuffer();        OptionVariable ov = (OptionVariable) type;        StringList options = ov.getOptions();        int optionCount = options.size();        for (int i = 0; i < optionCount; i++) {            result.append(                HTMLFactory.createCheckBox(                    options.get(i),                    QUESTION + getQuestionNumber() + ANSWER + getAnswertypeNumber() + "_" + i,                    options.get(i),                    false));            result.append(HTMLFactory.createLineBreak());        }        return result.toString();    }    /**     *  Description of the Method     *     * @param  type  Description of the Parameter     * @return       Description of the Return Value     */    private static String createOrder(IAnswerType type) {        String result = "";        String tableRow = "";        StringList options = ((Order) type).getOptions();        int optionCount = options.size();        if (optionCount == 0)            return "";        String cellWidth = "0%";        // create header        tableRow += HTMLFactory.createTableHeaderCell("");        for (int i = 1; i <= optionCount; i++) {            tableRow                += HTMLFactory.createTableCell(new StringBuffer("" + i).toString(), cellWidth);        }        result += HTMLFactory.createTableRow(tableRow);        // create body        for (int i = 0; i < optionCount; i++) {            tableRow = HTMLFactory.createTableCell(options.get(i), cellWidth);            for (int j = 1; j <= optionCount; j++) {                tableRow                    += HTMLFactory.createTableCell(                        HTMLFactory.createRadioButton(                            "",                            QUESTION + getQuestionNumber() + ANSWER + getAnswertypeNumber() + "_" + i,                            "",                            false),                        cellWidth);            }            result += HTMLFactory.createTableRow(tableRow);        }        result = HTMLFactory.createTable(result, 0, 0);        return result;    }    /**     *  Description of the Method     *     * @param  type  Description of the Parameter     * @return       Description of the Return Value     */    private static String createScaleCalculated(IAnswerType type) {        String result = "";        String dummy;        int left = ((ScaleCalculated) type).getLeft();        int right = ((ScaleCalculated) type).getRight();        int avg = ((ScaleCalculated) type).getAvg();        String textBefore = ((ScaleCalculated) type).getTextBefore();        String rightLable = ((ScaleCalculated) type).getRightLable();        int length = right - left + 1;        String cellWidth = "0%";        // Zahlenreihe        dummy = "";        dummy += HTMLFactory.createTableCell("", cellWidth);        if (right > left) {            for (int i = left; i <= right; i++) {                dummy += HTMLFactory.createTableCell("" + i, cellWidth);            }        }        else {            for (int i = left; i >= right; i--) {                dummy += HTMLFactory.createTableCell("" + i, cellWidth);            }        }        dummy += HTMLFactory.createTableCell("", cellWidth);        dummy = HTMLFactory.createTableRow(dummy);        result += dummy;        // untere Reihe        dummy = "";        dummy += HTMLFactory.createTableCell(textBefore, cellWidth);		if(right > left) {        for (int i = left; i <= right; i++) {            dummy                += HTMLFactory.createTableCell(                    HTMLFactory.createRadioButton(                        "",                        QUESTION + getQuestionNumber() + ANSWER + getAnswertypeNumber(),                        "" + i,                        false),                    cellWidth);        }		} else {        for (int i = left; i >= right; i--) {            dummy                += HTMLFactory.createTableCell(                    HTMLFactory.createRadioButton(                        "",                        QUESTION + getQuestionNumber() + ANSWER + getAnswertypeNumber(),                        "" + i,                        false),                    cellWidth);        }		    		    		    		}        dummy += HTMLFactory.createTableCell(rightLable, cellWidth);        dummy = HTMLFactory.createTableRow(dummy);        result += dummy;        return HTMLFactory.createTable(result, 0, 0);    }    /**     *  Description of the Method     *     * @param  type  Description of the Parameter     * @return       Description of the Return Value     */    private static String createScaleLabled(IAnswerType type) {        StringBuffer result = new StringBuffer();        result.append("Hier muss noch was getan werden!");        return result.toString();    }}