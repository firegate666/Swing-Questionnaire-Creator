package de.sep.ui.dialog;/* * SEP-Projekt WS 2001-2002 -- Questionaire *  * Projektteilnehmer: * Marco Behnke <marco@firegate.de> * Sebastian Davids <sdavids@gmx.de> * Martin Koose <martin@koose-hh.de> *  * Projektbegleitung:  * Prof. Dr. Bernd Kahlbrandt <Bernd.Kahlbrandt@informatik.fh-hamburg.de> *  * Copyright (c)2001 Behnke, Davids & Koose. Alle Rechte vorbehalten. * =========================================================================== */import java.awt.BorderLayout;import java.awt.Frame;import java.awt.GridLayout;import java.awt.Insets;import java.awt.Rectangle;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.awt.event.KeyAdapter;import java.awt.event.KeyEvent;import java.awt.event.WindowAdapter;import java.awt.event.WindowEvent;import java.util.ResourceBundle;import javax.swing.BorderFactory;import javax.swing.JButton;import javax.swing.JDialog;import javax.swing.JLabel;import javax.swing.JPanel;import javax.swing.JScrollPane;import javax.swing.JTextArea;import javax.swing.JToggleButton;import javax.swing.SwingConstants;import de.sdavids.swing.SwingCreator;import de.sdavids.swing.SwingUtils;/** * A dialog displaying information on the developers, used APIs etc. */public class InfoDialog extends JDialog {	//////////////////////////////////////////////////////////////////////////////	// ATTRIBUTES	//////////////////////////////////////////////////////////////////////////////	/* ----------- Instance Attributes ---------- */	/** The bundle containing the configuration. */	private ResourceBundle fConfig;	/** The dom4j-license. */	private String fDom4jLicense;	/** The Kunststoff-license. */	private String fKunststoffLicense;	/* ----------- Widgets ---------- */	/** The panel containing the dom4j-license. */	private JPanel fLicensePnl;	/** The close button. */	private JButton fCloseBtn;	/** The dom4j-license button. */	private JToggleButton fDom4jBtn;	/** The Kunststoff-license button. */	private JToggleButton fKunststoffBtn;	/** The text area displaying the licenses. */	private JTextArea fLicenseTA;	//////////////////////////////////////////////////////////////////////////////	// CONSTRUCTORS	//////////////////////////////////////////////////////////////////////////////	/**	 * Creates a non-modal dialog with the specified configuration and with	 * the specified owner frame.	 *	 * @param	<code>owner</code> the <code>Frame</code> from which	 * 			the dialog is displayed.	 * @param	<code>config</code> the configuration.	 */	public InfoDialog(Frame owner, ResourceBundle config) {		super(owner);		setConfig(config);		initialize();	}	/////////////////////////////////////////////////////////////////////////////	// WIDGETS	/////////////////////////////////////////////////////////////////////////////	/**	 * Answer the info panel.	 * 	 * The info panel contains the copyright notice and the application	 * and developer panels.	 * 	 * @return	the panel.	 */	protected JPanel getInfoPnl() {		JPanel result = new JPanel(new BorderLayout(0, 12));		result.add(getApplicationPnl(), BorderLayout.NORTH);		result.add(getCentralPnl(), BorderLayout.CENTER);		result.add(			new JLabel(getResource("app.copyright"), SwingConstants.CENTER),			BorderLayout.SOUTH);		//non-I18N-NLS		return result;	}	/**	 * Answer the programm panel.	 * 	 * The programm panel contains application' title and version.	 * 	 * @return	the panel.	 */	protected JPanel getApplicationPnl() {		JPanel result = new JPanel(new GridLayout(2, 1, 0, 12));		result.add(new JLabel(getResource("app.title"))); //non-I18N-NLS		result.add(			new JLabel(getResource("dlg.info.version") + " " + getResource("app.version")));		//non-I18N-NLS		return result;	}	/**	 * Answer the developer panel.	 * 	 * The developer panel contains the name and email panels.	 * 	 * @return	the panel.	 */	protected JPanel getDeveloperPnl() {		JPanel result = new JPanel(new BorderLayout(12, 0));		result			.setBorder(				BorderFactory				.createCompoundBorder(					BorderFactory.createTitledBorder(						BorderFactory.createEtchedBorder(),						getResource("dlg.info.developer")),		//non-I18N-NLS		BorderFactory.createEmptyBorder(12, 12, 12, 12)));		result.add(getNamePnl(), BorderLayout.WEST);		result.add(getEmailPnl(), BorderLayout.CENTER);		return result;	}	/**	 * Answer the name panel.	 * 	 * The name panel contains the developer's names.	 * 	 * @return	the panel.	 */	protected JPanel getNamePnl() {		JPanel result = new JPanel(new GridLayout(3, 1, 0, 12));		result.add(new JLabel(getResource("app.marcoBehnke"))); //non-I18N-NLS		result.add(new JLabel(getResource("app.sebastianDavids"))); //non-I18N-NLS		result.add(new JLabel(getResource("app.martinKoose"))); //non-I18N-NLS		return result;	}	/**	 * Answer the email panel.	 * 	 * The email panel contains developer's email addresses.	 * 	 * @return	the panel.	 */	protected JPanel getEmailPnl() {		JPanel result = new JPanel(new GridLayout(3, 1, 0, 12));		result.add(new JLabel(getResource("app.marcoBehnke.email"))); //non-I18N-NLS		result.add(new JLabel(getResource("app.sebastianDavids.email")));		//non-I18N-NLS		result.add(new JLabel(getResource("app.martinKoose.email"))); //non-I18N-NLS		return result;	}	/**	 * Answer the API panel.	 * 	 * The API panel contains info on the used APIs and a buttons to display	 * their licenses.	 * 	 * @return	the panel.	 */	protected JPanel getAPIsPnl() {		JPanel dom4j = new JPanel(new BorderLayout(12, 0));		dom4j.add(new JLabel(getResource("dlg.info.dom4j")), BorderLayout.CENTER);		//non-I18N-NLS		dom4j.add(getDom4jBtn(), BorderLayout.EAST);		JPanel kunststoff = new JPanel(new BorderLayout(12, 0));		kunststoff.add(			new JLabel(getResource("dlg.info.kunststoff")),			BorderLayout.CENTER);		//non-I18N-NLS		kunststoff.add(getKunststoffBtn(), BorderLayout.EAST);		JPanel pnl = new JPanel(new GridLayout(2, 1, 0, 6));		pnl.add(dom4j);		pnl.add(kunststoff);		JPanel result = new JPanel(new BorderLayout(0, 12));		result			.setBorder(				BorderFactory				.createCompoundBorder(					BorderFactory.createTitledBorder(						BorderFactory.createEtchedBorder(),						getResource("dlg.info.apis")),		//non-I18N-NLS		BorderFactory.createEmptyBorder(12, 12, 12, 12)));		result.add(pnl, BorderLayout.NORTH);		return result;	}	/**	 * Answer the text area displaying the dom4j-license.	 * 	 * @return	the textarea.	 */	protected JTextArea getLicenseTA() {		if (null == fLicenseTA) {			fLicenseTA =				new JTextArea(					"",					Integer.parseInt(getResource("dlg.info.license.ta.rows")),					Integer.parseInt(getResource("dlg.info.license.ta.columns")));			//non-I18N-NLS			fLicenseTA.setEditable(false);			fLicenseTA.setLineWrap(true);			fLicenseTA.setWrapStyleWord(true);			fLicenseTA.setBorder(BorderFactory.createEmptyBorder(2, 2, 2, 2));		}		return fLicenseTA;	}	/**	 * Answer the dom4j-license panel.	 * 	 * The dom4j-license panel contains the dom4j-license text area.	 * 	 * @return	the panel.	 */	protected JPanel getLicensePnl() {		if (null == fLicensePnl) {			JScrollPane sp = new JScrollPane(getLicenseTA());			sp.setBorder(BorderFactory.createEtchedBorder());			fLicensePnl = new JPanel();			fLicensePnl.add(sp);			fLicensePnl.setVisible(false);		}		return fLicensePnl;	}	/**	 * Answer the close button.	 * 	 * @return	the button.	 */	protected JButton getCloseBtn() {		if (null == fCloseBtn) {			//non-I18N-NLS			fCloseBtn =				SwingCreator.newJButton("btn.close", getConfig(), new ActionListener() {				public void actionPerformed(ActionEvent evt) {					closeAction();				}			});			fCloseBtn.setNextFocusableComponent(getDom4jBtn());		}		return fCloseBtn;	}	/**	 * Answer the Kunststoff-license button.	 * 	 * @return	the button.	 */	protected JToggleButton getKunststoffBtn() {		if (null == fKunststoffBtn) {			//non-I18N-NLS			fKunststoffBtn =				SwingCreator					.newJToggleButton("btn.kunststoff", getConfig(), new ActionListener() {				public void actionPerformed(ActionEvent evt) {					showKunststoffLicenseAction();					getLicenseTA().scrollRectToVisible(new Rectangle(0, 0, 1, 1));				}			});			fKunststoffBtn.setNextFocusableComponent(getCloseBtn());			fKunststoffBtn.setMargin(new Insets(2, 2, 2, 2));		}		return fKunststoffBtn;	}	/**	 * Answer the dom4j-license button.	 * 	 * @return	the button.	 */	protected JToggleButton getDom4jBtn() {		if (null == fDom4jBtn) {			//non-I18N-NLS			fDom4jBtn =				SwingCreator.newJToggleButton("btn.dom4j", getConfig(), new ActionListener() {				public void actionPerformed(ActionEvent evt) {					showDom4jLicenseAction();				}			});			fDom4jBtn.setNextFocusableComponent(getKunststoffBtn());			fDom4jBtn.setMargin(new Insets(2, 2, 2, 2));		}		return fDom4jBtn;	}	/**	 * Answer the content panel.	 * 	 * The content panel is the root panel.	 * 	 * @return	the panel.	 */	protected JPanel getContentPnl() {		JPanel pnl = new JPanel(new BorderLayout());		pnl.add(getCloseBtn(), BorderLayout.EAST);		JPanel result = new JPanel(new BorderLayout(0, 16));		result.setBorder(BorderFactory.createEmptyBorder(12, 12, 12, 12));		result.add(pnl, BorderLayout.SOUTH);		result.add(getInfoPnl(), BorderLayout.CENTER);		return result;	}	/**	 * Answer the central panel.	 * 	 * The central contains information on the developers, the used APIs, and possibly	 * the licenses.	 * 	 * @return	the panel.	 */	protected JPanel getCentralPnl() {		JPanel pnl = new JPanel(new BorderLayout(0, 12));		pnl.add(getDeveloperPnl(), BorderLayout.NORTH);		pnl.add(getAPIsPnl(), BorderLayout.CENTER);		pnl.add(getLicensePnl(), BorderLayout.EAST);		JPanel result = new JPanel(new BorderLayout(12, 0));		result.add(pnl, BorderLayout.CENTER);		return result;	}	/////////////////////////////////////////////////////////////////////////////	// ACTIONS	/////////////////////////////////////////////////////////////////////////////	/**	 * Invoked when an the dialog is closed.	 */	protected void closeAction() {		dispose();	}	/**	 * Invoked when the Dom4j-License button is pressed.	 */	protected void showDom4jLicenseAction() {		getLicensePnl()			.setBorder(				BorderFactory				.createCompoundBorder(					BorderFactory.createTitledBorder(						BorderFactory.createEtchedBorder(),						getResource("dlg.info.dom4j")),		//non-I18N-NLS		BorderFactory.createEmptyBorder(12, 12, 12, 12)));		getLicenseTA().setText(getDom4jLicense());		if (getKunststoffBtn().isSelected()) {			getKunststoffBtn().setSelected(false);		} else {			setVisible(false);			getLicensePnl().setVisible(!getLicensePnl().isVisible());			SwingUtils.showCentered(getParent(), this);		}		if (!getDom4jBtn().hasFocus()) {			if (!getDom4jBtn().isRequestFocusEnabled())				getDom4jBtn().setRequestFocusEnabled(true);			getDom4jBtn().requestFocus();		}		//getLicenseTA().scrollRectToVisible(new Rectangle(0, 0, 1, 1));//SD-01-02-18: Doesn' work don't know why.	}	/**	 * Invoked when the Kunststoff-License button is pressed.	 */	protected void showKunststoffLicenseAction() {		getLicensePnl()			.setBorder(				BorderFactory				.createCompoundBorder(					BorderFactory.createTitledBorder(						BorderFactory.createEtchedBorder(),						getResource("dlg.info.kunststoff")),		//non-I18N-NLS		BorderFactory.createEmptyBorder(12, 12, 12, 12)));		getLicenseTA().setText(getKunststoffLicense());		if (getDom4jBtn().isSelected()) {			getDom4jBtn().setSelected(false);		} else {			setVisible(false);			getLicensePnl().setVisible(!getLicensePnl().isVisible());			SwingUtils.showCentered(getParent(), this);		}		if (!getKunststoffBtn().hasFocus()) {			if (!getKunststoffBtn().isRequestFocusEnabled())				getKunststoffBtn().setRequestFocusEnabled(true);			getKunststoffBtn().requestFocus();		}		//getLicenseTA().scrollRectToVisible(new Rectangle(0, 0, 1, 1));//SD-01-02-18: Doesn' work don't know why.	}	/////////////////////////////////////////////////////////////////////////////	// PUBLIC INTERFACE	/////////////////////////////////////////////////////////////////////////////	/* ----------- Mutators --------------------- */	/**	 * Makes the dialog visible.	 * 	 * Puts the focus on the &quot;Close&quot; button	 */	public void show() {		if (!getCloseBtn().hasFocus()) {			if (!getCloseBtn().isRequestFocusEnabled())				getCloseBtn().setRequestFocusEnabled(true);			getCloseBtn().requestFocus();		}		super.show();	}	/////////////////////////////////////////////////////////////////////////////	// PROTECTED METHODS	/////////////////////////////////////////////////////////////////////////////	/* ----------- Mutators --------------------- */	/**	 * Set the dialog's configuration.	 *	 * @param	<code>config</code> the bundle.	 */	protected void setConfig(ResourceBundle config) {		fConfig = config;	}	/**	 * Initialize the dialog.	 * 	 * Lays out all <code>Component</code>s and registers needed	 * <code>EventListener</code>s.	 */	protected void initialize() {		addKeyListener(new KeyAdapter() {			public void keyReleased(KeyEvent evt) {				if (KeyEvent.VK_ESCAPE == evt.getKeyCode())					closeAction();			}		});		addWindowListener(new WindowAdapter() {			public void windowOpened(WindowEvent evt) {				if (!getCloseBtn().hasFocus()) {					if (!getCloseBtn().isRequestFocusEnabled())						getCloseBtn().setRequestFocusEnabled(true);					getCloseBtn().requestFocus();				}			}		});		setTitle(getResource("dlg.info.title")); //non-I18N-NLS		setContentPane(getContentPnl());		pack();		setResizable(false);	}	/* ----------- Accessors -------------------- */	/**	 * Answer the resource bundle containing the configuration.	 * 	 * @return	the bundle.	 */	protected ResourceBundle getConfig() {		return fConfig;	}	/**	 * Answer the string resource with the given key.	 * 	 * @return	the resource.	 */	protected String getResource(String key) {		return getConfig().getString(key);	}	/**	 * Answer the dom4j-license.	 * 	 * @return	the license.	 */	protected String getDom4jLicense() {		if (fDom4jLicense == null) {			fDom4jLicense = getResource("dom4j.license");		}		return fDom4jLicense;	}	/**	 * Answer the dom4j-license.	 * 	 * @return	the license.	 */	protected String getKunststoffLicense() {		if (fKunststoffLicense == null) {			fKunststoffLicense = getResource("kunststoff.license");		}		return fKunststoffLicense;	}}