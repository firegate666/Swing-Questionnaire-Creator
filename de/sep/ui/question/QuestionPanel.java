package de.sep.ui.question;/* * SEP-Projekt WS 2001-2002 -- Questionaire * * Projektteilnehmer: * Marco Behnke <marco@firegate.de> * Sebastian Davids <sdavids@gmx.de> * Martin Koose <martin@koose-hh.de> * * Projektbegleitung: * Prof. Dr. Bernd Kahlbrandt <Bernd.Kahlbrandt@informatik.fh-hamburg.de> * * Copyright (c)2001 Behnke, Davids & Koose. Alle Rechte vorbehalten. * =========================================================================== */import java.awt.BorderLayout;import java.awt.Color;import java.awt.Component;import java.awt.datatransfer.DataFlavor;import java.awt.datatransfer.UnsupportedFlavorException;import java.awt.dnd.DnDConstants;import java.awt.dnd.DropTarget;import java.awt.dnd.DropTargetDragEvent;import java.awt.dnd.DropTargetDropEvent;import java.awt.dnd.DropTargetEvent;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.awt.event.MouseAdapter;import java.awt.event.MouseEvent;import java.beans.PropertyChangeEvent;import java.beans.PropertyChangeListener;import java.io.IOException;import javax.swing.BorderFactory;import javax.swing.JPanel;import javax.swing.JPopupMenu;import javax.swing.JSpinner;import javax.swing.SpinnerNumberModel;import javax.swing.event.ChangeEvent;import javax.swing.event.ChangeListener;import javax.swing.event.PopupMenuEvent;import de.sdavids.dnd.DropTargetAdapter;import de.sdavids.dnd.StringTransferable;import de.sdavids.swing.PopupMenuAdapter;import de.sdavids.swing.SwingCreator;import de.sdavids.swing.beans.BoundJPanel;import de.sdavids.swing.controls.JPlusMinusButton;import de.sdavids.swing.controls.LabelTextFieldPanel;import de.sep.dnd.AnswerTypeTranferable;import de.sep.model.answertype.IAnswerType;import de.sep.model.answertype.IllegalAnswerTypeException;import de.sep.model.question.IQuestion;import de.sep.ui.Questionaire;import de.sep.ui.actions.IQuestionaireActions;import de.sep.ui.answertype.AnswerTypesPanel;import de.sep.ui.questionaire.QuestionairePanel;/** * View for an <code>IQuestion</code>. */public class QuestionPanel extends BoundJPanel {	//////////////////////////////////////////////////////////////////////////////	// ATTRIBUTES	//////////////////////////////////////////////////////////////////////////////	/* ----------- Instance Attributes ---------- */	/** Reference to the question model */	private IQuestion fQuestion;	/** A reference to the application. */	private Questionaire fApp;	/** The background color of this panel when it is not selected. */	private final Color UNSELECTED_COLOR;	/** The highlight color. */	private Color fHighlight;	/** Indicate if this <code>QuestionPanel</code> has been selected. */	private boolean fSelected;	/** Whether the answer types should be shown or not. */	private boolean fAnswerTypesCollapsed;	/* ----------- Controls ---------- */	/** The panel is the <em>root</em> panel. */	private JPanel fContentPnl;	/** The <code>LabelTextFieldPanel</code> displaying the question's text. */	private LabelTextFieldPanel fTextPnl;	/** Panel containing the <code>AnswerType</code>s. */	private AnswerTypesPanel fAnswerTypePnl;	/** Panel containing the question's number. */	private JPanel fNumberPnl;	/** The Spinner containing the question's number in it's textfield. */	private JSpinner fNumberTF;	/** The collapse button. */	private JPlusMinusButton fCollapseBtn;	/** The popup menu. */	private JPopupMenu fPopupMenu;	//////////////////////////////////////////////////////////////////////////////	// INNER CLASSES	//////////////////////////////////////////////////////////////////////////////	protected class QuestionPanelDTListener extends DropTargetAdapter {		/**		 * Answer whether the given <code>DropTargetDropEvent</code>		 * is acceptable; it is acceptable if the dropped data is not		 * a question and if the drop action is		 * <code>DnDConstants.ACTION_COPY</code>.		 *		 * @param	<code>evt</code> the event.		 * @return	<code>true</code> if it is acceptable.		 */		protected boolean isDragAcceptable(DropTargetDropEvent evt) {			return (				super.isDragAcceptable(evt)					&& evt.getTransferable().isDataFlavorSupported(						AnswerTypeTranferable.ANSWERTYPE_FLAVOR));		}		/**		 * Answer whether the given <code>DropTargetDragEvent</code>		 * is acceptable; it is acceptable if the dropped data is a		 * question and if the drop action is		 * <code>DnDConstants.ACTION_COPY</code>.		 *		 * @param	<code>evt</code> the event.		 * @return	<code>true</code> if it is acceptable.		 */		protected boolean isDragAcceptable(DropTargetDragEvent evt) {			return (				super.isDragAcceptable(evt)					&& evt.isDataFlavorSupported(AnswerTypeTranferable.ANSWERTYPE_FLAVOR));		}		/**		 * Invoked if the <code>DropTargetDropEvent</code> is acceptable.		 *		 * Adds the appropriate <code>IAnswerType</code> to the question		 * model.		 *		 * @param	<code>evt</code> the event.		 * @return	<code>true</code> if the model has been updated.		 */		public boolean execute(DropTargetDropEvent evt) {			try {				getApp().performAction(					IQuestionaireActions.ACTION_APPEND_ANSWERTYPE,					getAnswerTypePnl(),					getAnswerTypePnl().hashCode(),					(String) evt.getTransferable().getTransferData(						AnswerTypeTranferable.ANSWERTYPE_FLAVOR));				beAnswerTypesNotCollapsed();				return true;			} catch (IOException e) {				return false;			} catch (UnsupportedFlavorException e) {				return false;			}		}		/**		 * Highlight the panel if the user tries to drop something onto it.		 *		 * @param	<code>evt</code> the <code>DropTargetDragEvent</code>.		 */		public void dragEnter(DropTargetDragEvent evt) {			//for this to work the drop panels have to be added directly			//to the QuestionairePanel			((QuestionairePanel) getParent())				.showAllQuestionPanelsInPreferredCollapsionState();			if (isDragAcceptable(evt)) {				super.dragEnter(evt);				showNotCollapsed();				highlightDropZone();			}		}		/**		 * Remove highlight from the panel.		 *		 * @param	<code>evt</code> the <code>DropTargetEvent</code>.		 */		public void dragExit(DropTargetEvent evt) {			super.dragExit(evt);			if (isAnswerTypesNotCollapsed())				showNotCollapsed();			unhighlightDropZone();		}		/**		 * Determine the <code>DataFlavor</code> from the		 * <code>DropTargetDropEvent</code>.		 *		 * @param	<code>evt</code> the <code>DropTargetDropEvent</code>.		 * @return	the <code>DataFlavor</code>.		 */		protected DataFlavor chooseDropFlavor(DropTargetDropEvent evt) {			if ((evt.isLocalTransfer() == true)				&& evt.isDataFlavorSupported(StringTransferable.localStringFlavor)) {				return StringTransferable.localStringFlavor;			}			if (evt.isDataFlavorSupported(StringTransferable.localStringFlavor)) {				return StringTransferable.localStringFlavor;			} else if (evt.isDataFlavorSupported(DataFlavor.stringFlavor)) {				return DataFlavor.stringFlavor;			}			return null;		}		/**		 * Retrieve the string data form the <code>DropTargetDropEvent</code>.		 *		 * @param	<code>evt</code> the <code>DropTargetDropEvent</code>.		 * @return	the data.		 */		protected String getData(DropTargetDropEvent e)			throws UnsupportedFlavorException, IOException {			return ((String) e.getTransferable().getTransferData(chooseDropFlavor(e)));		}	}	//////////////////////////////////////////////////////////////////////////////	// CONSTRUCTORS	//////////////////////////////////////////////////////////////////////////////	/**	 * Creates a panel showing the question model.	 *	 * @param	<code>question</code> the question model.	 * @param	<code>app<code> a reference to the application.	 */	public QuestionPanel(IQuestion question, Questionaire app) {		super(new BorderLayout(0, 12));		UNSELECTED_COLOR = getBackground();		setApp(app);		setQuestion(question);		setHighlight(getApp().getHighlightColor());		initialize();	}	/////////////////////////////////////////////////////////////////////////////	// CONTROLS	/////////////////////////////////////////////////////////////////////////////	/**	 * Answer the panel containig the question's text.	 *	 * @return	the panel.	 */	protected LabelTextFieldPanel getTextPnl() {		if (null == fTextPnl) {			fTextPnl =				new LabelTextFieldPanel(					getQuestion().getText(),					getResource("lbl.questionPnl.text.text"),					false);			fTextPnl.setToolTipText(getResource("tf.questionPnl.text.tooltip"));			fTextPnl.addPropertyChangeListener("value", new PropertyChangeListener() {				public void propertyChange(PropertyChangeEvent evt) {					updateTextAction();				}			});		}		return fTextPnl;	}	/**	 * Answer the panel containig the question's number.	 *	 * @return	the panel.	 */	protected JPanel getNumberPnl() {		if (null == fNumberPnl) {			fNumberPnl = new JPanel(new BorderLayout());			fNumberPnl.add(getNumberTF(), BorderLayout.NORTH);		}		return fNumberPnl;	}	/**	 * Answer the root panel.	 *	 * @return	the panel.	 */	protected JPanel getContentPnl() {		//the fContentPnl has to be added directly to the question panel		//in order for the NewAnswerTypeAction to work		if (null == fContentPnl) {			fContentPnl = new JPanel(new BorderLayout(0, 12));			fContentPnl.setBorder(BorderFactory.createEmptyBorder(5, 12, 12, 6));			fContentPnl.add(getTopPnl(), BorderLayout.NORTH);			fContentPnl.add(getAnswerTypePnl(), BorderLayout.CENTER);		}		return fContentPnl;	}	/**	 * Answer the top panel containing the questions text and the	 * collapse-/uncollapse-button.	 *	 * @return	the panel.	 */	protected JPanel getTopPnl() {		JPanel result = new JPanel(new BorderLayout(12, 12));		result.add(getTextPnl(), BorderLayout.CENTER);		result.add(getCollapseBtn(), BorderLayout.EAST);		return result;	}	/**	 * Answer the panel containing the question's answer types.	 *	 * @return	the panel.	 */	protected AnswerTypesPanel getAnswerTypePnl() {		if (null == fAnswerTypePnl) {			fAnswerTypePnl = new AnswerTypesPanel(this, getApp());		}		return fAnswerTypePnl;	}	/**	 * Answer the textfield containing the question's number.	 *	 * The textfield is wrapped inside a <code>NumberSpinner</code>.	 *	 * @return	the textfield (spinner).	 * @see		de.sdavids.swing.controls.NumberSpinner.	 */	//	protected NumberSpinner getNumberTF() {	//		if (null == fNumberTF) {	//			fNumberTF =	//				SwingCreator	//					.newNumberSpinner(	//						"tf.questionPnl.renumberQuestion",	//						getApp().getConfig(),	//						new PropertyChangeListener() {	//				public void propertyChange(PropertyChangeEvent evt) {	//					if ("text".equals(evt.getPropertyName())) {	//						updateNumberAction();	//					}	//				}	//			});	//	//			fNumberTF.setText(String.valueOf(getQuestion().getNumber()));	//		}>	//	//		return fNumberTF;	//	}	protected JSpinner getNumberTF() {		if (null == fNumberTF) {			SpinnerNumberModel snm = new SpinnerNumberModel();			// Muss noch auf client.properties umgebaut werden			snm.setMaximum(new Integer(500));			snm.setMinimum(new Integer(1));			snm.setValue(new Integer(getQuestion().getNumber()));			JSpinner js = new JSpinner(snm);			snm.addChangeListener(new ChangeListener() {				public void stateChanged(ChangeEvent evt) {					//updateNumberAction();				}			});			fNumberTF = js;		}		return fNumberTF;	}	/**	 * Answer the collapse button.	 *	 * @return	the button.	 */	protected JPlusMinusButton getCollapseBtn() {		if (null == fCollapseBtn) {			fCollapseBtn = new JPlusMinusButton(false);			fCollapseBtn.addActionListener(new ActionListener() {				public void actionPerformed(ActionEvent evt) {					if ("-".equals(evt.getActionCommand())) {						beAnswerTypesNotCollapsed();					} else {						beAnswerTypesCollapsed();					}				}			});		}		return fCollapseBtn;	}	/**	 * Answer the popup menu.	 *	 * @return	the popup menu.	 */	protected JPopupMenu getPopupMenu() {		if (null == fPopupMenu) {			fPopupMenu = new JPopupMenu();			fPopupMenu.add(				SwingCreator.newJMenuItem(					getApp().actionForName(IQuestionaireActions.ACTION_DELETE_QUESTION)));			fPopupMenu.addPopupMenuListener(new PopupMenuAdapter() {				public void popupMenuWillBecomeVisible(PopupMenuEvent e) {					showSelected();				}				public void popupMenuWillBecomeInvisible(PopupMenuEvent e) {					showUnselected();				}			});		}		return fPopupMenu;	}	/////////////////////////////////////////////////////////////////////////////	// ACTIONS	/////////////////////////////////////////////////////////////////////////////	/**	 * Invoked when the question model has changed.	 */	protected void questionChangedAction(PropertyChangeEvent evt) {		String propName = evt.getPropertyName();		if ("text".equals(propName)) {			getTextPnl().setValue(getQuestion().getText());		} else if ("number".equals(propName)) {			//			getNumberTF().setText(String.valueOf(getQuestion().getNumber()));			getNumberTF().setValue(String.valueOf(getQuestion().getNumber()));		} else if ("answersInsert".equals(propName)) {			try {				getAnswerTypePnl().insertAnswerType(					((Integer) evt.getOldValue()).intValue(),					(IAnswerType) evt.getNewValue());			} catch (IllegalAnswerTypeException e) {				e.printStackTrace();			}		} else if ("answersAppend".equals(propName)) {			try {				getAnswerTypePnl().appendAnswerType((IAnswerType) evt.getNewValue());			} catch (IllegalAnswerTypeException e) {				e.printStackTrace();			}		}		if (isVisible())			revalidate();	}	/**	 * Invoked when a questions number is changed.	 */	protected void updateNumberAction() {		try {			System.out.println("updateNumberAction");			int number = ((Integer) getNumberTF().getValue()).intValue();			if (number == getQuestion().getNumber())				return;			getQuestion().setNumber(number);			if (!getNumberTF().hasFocus()) {				if (!getNumberTF().isRequestFocusEnabled())					getNumberTF().setRequestFocusEnabled(true);				getNumberTF().requestFocus();			}		} catch (NumberFormatException e) {			System.out.println(e.getMessage());			//ignore; no change in model		}	}	/**	 * Invoked when a questions text is changed.	 */	protected void updateTextAction() {		String text = getTextPnl().getValue();		if (getQuestion().getText().equals(text))			return;		getQuestion().setText(text);	}	/////////////////////////////////////////////////////////////////////////////	// PUBLIC METHODS	/////////////////////////////////////////////////////////////////////////////	/* ----------- Mutators --------------------- */	/**	 * Answer the &highlighter&quot; color.	 *	 * @return	the color.	 */	public Color getHighlight() {		return fHighlight;	}	/**	 * Set the &highlighter&quot; color.	 *	 * If <code>null == highlight</code> the default color yellow will be used.	 *	 * @param	<code>highlight</code> the color.	 */	public void setHighlight(Color highlight) {		fHighlight = (null == highlight) ? Color.yellow : highlight;		getTextPnl().setTextFieldBackground(fHighlight);	}	/**	 * Show the question's text textfield and set the focus on it.	 */	public void focusOnText() {		getTextPnl().showTextField();	}	public void showPreferredCollapsionState() {		getAnswerTypePnl().setVisible(isAnswerTypesNotCollapsed());		if (isAnswerTypesNotCollapsed()) {			getCollapseBtn().beMinus();		} else {			getCollapseBtn().bePlus();		}	}	/**	 * Put the answer type panel into it's collapsed state.	 */	public void beAnswerTypesCollapsed() {		//		if (isAnswerTypesCollapsed())		//			return;		fAnswerTypesCollapsed = true;		showCollapsed();	}	/**	 * Put the answer type panel into it's uncollapsed state.	 */	public void beAnswerTypesNotCollapsed() {		//		if (isAnswerTypesNotCollapsed())		//			return;		fAnswerTypesCollapsed = false;		showNotCollapsed();	}	/**	 * Answer if the answer type panel is collapsed.	 * 	 * @return	<code>true</code> if the panel is collapsed.	 */	public boolean isAnswerTypesCollapsed() {		return fAnswerTypesCollapsed;	}	/* ----------- Acessors --------------------- */	/**	 * Answer the question model.	 *	 * @return	the questions.	 */	public IQuestion getQuestion() {		return fQuestion;	}	/////////////////////////////////////////////////////////////////////////////	// PROTECTED METHODS	/////////////////////////////////////////////////////////////////////////////	/* ----------- Mutators --------------------- */	/**	 * Initialize the panel.	 *	 * Lays out all <code>Components</code> and registers needed	 * <code>EventListener</code>s.	 */	protected void initialize() {		setBorder(BorderFactory.createEtchedBorder());		add(getNumberPnl(), BorderLayout.WEST);		add(getContentPnl(), BorderLayout.CENTER);		QuestionPanelDTListener listener = new QuestionPanelDTListener();		new DropTarget(getContentPnl(), DnDConstants.ACTION_COPY, listener, true);		addMouseListener(new MouseAdapter() {			public void mouseClicked(MouseEvent evt) {				showPopupMenu(evt);			}			public void mousePressed(MouseEvent evt) {				showPopupMenu(evt);			}			public void mouseReleased(MouseEvent evt) {				if (!hasFocus()) {					if (!isRequestFocusEnabled())						setRequestFocusEnabled(true);					requestFocus();				}				if (showPopupMenu(evt))					return;				if (isUnselected()) {					beSelected();				} else {					beUnselected();				}			}		});	}	/**	 * Show the popup menu if a <em>PopupTrigger</em> has been sent.	 * 	 * @param	<code>evt</code> the originating <code>MouseEvent</code>.	 * @return	<code>true</code> if the popup menu is shown.	 */	public boolean showPopupMenu(MouseEvent evt) {		if (evt.isPopupTrigger()) {			getPopupMenu().show((Component) evt.getSource(), evt.getX(), evt.getY());			return true;		}		return false;	}	protected void showCollapsed() {		getAnswerTypePnl().setVisible(false);		getCollapseBtn().bePlus();	}	protected void showNotCollapsed() {		getAnswerTypePnl().setVisible(true);		getCollapseBtn().beMinus();	}	/**	 * Set the reference to the application.	 *	 * @param	the reference.	 */	protected void setApp(Questionaire app) {		fApp = app;	}	/**	 * Set the question model.	 *	 * @return	<code>question</code> the model.	 */	protected void setQuestion(IQuestion question)		throws IllegalArgumentException {		if (null == question)			throw new IllegalArgumentException("question null");		IQuestion oldQuestion = getQuestion();		fQuestion = question;		fQuestion.addPropertyChangeListener(new PropertyChangeListener() {			public void propertyChange(PropertyChangeEvent evt) {				questionChangedAction(evt);			}		});		firePropertyChange("question", oldQuestion, question);	}	/**	 * Highlight the drop panel.	 */	protected void highlightDropZone() {		getAnswerTypePnl().showEndDropPanelSelected();		//setBackground(getHighlight());	}	/**	 * Remove the highlight from the drop panel.	 */	protected void unhighlightDropZone() {		getAnswerTypePnl().showEndDropPanelUnselected();		//setBackground(getUnselectedColor());	}	/**	 * Put the panel into it's selected state.	 */	protected void beSelected() {		showSelected();		fSelected = true;	}	/**	 * Put the panel into it's unselected state.	 */	protected void beUnselected() {		showUnselected();		fSelected = false;	}	protected boolean isAnswerTypesNotCollapsed() {		return !isAnswerTypesCollapsed();	}	/**	 * Answer if the panel is in the unselected state.	 * 	 * @return	<code>true</code> if the panel is in it's unselected	 * 			state.	 */	protected boolean isUnselected() {		return !isSelected();	}	/**	 * Answer if the panel is in the selected state.	 * 	 * @return	<code>true</code> if the panel is in it's selected	 * 			state.	 */	protected boolean isSelected() {		return fSelected;	}	/**	 * Highlight the entire question panel.	 */	protected void showSelected() {		if (isUnselected()) {			setBackground(getHighlight());			getContentPnl().setBackground(getHighlight());			getAnswerTypePnl().setBackground(getHighlight());			getTextPnl().setBackground(getHighlight());			getNumberTF().setBackground(getHighlight());			//getTopPnl().setBackground(getHighlight());//SD-02-01-19: doesn't work		}	}	/**	 * Remove the highlight from the entire question panel.	 */	public void showUnselected() {		if (isSelected()) {			getContentPnl().setBackground(getUnselectedColor());			getAnswerTypePnl().setBackground(getUnselectedColor());			getTextPnl().setBackground(getUnselectedColor());			getNumberTF().setBackground(getUnselectedColor());			//getTopPnl().setBackground(getUnselectedColor());//SD-02-01-19: doesn't work			setBackground(getUnselectedColor());		}		//getNumberTF().beUnselected();	}	/* ----------- Accessors -------------------- */	/**	 * Answer the string resource with the given key.	 *	 * @return    the resource.	 */	protected String getResource(String key) {		return getApp().getConfig(key);	}	/**	 * Answer the reference to the application.	 *	 * @return	the reference.	 */	protected Questionaire getApp() {		return fApp;	}	protected Color getUnselectedColor() {		return UNSELECTED_COLOR;	}}